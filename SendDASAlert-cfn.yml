Description: >-
  CloudFormation template to deploy lambda function for notifying noncompliant PG
  queries
Parameters:
  s3Bucket:
    Description: s3 bucket name of the lambda
    Type: String
  s3Key:
    Default: lambda_DASAlert_function.zip
    Description: s3 bucket key of the lambda
    Type: String
  RecipientEmail:
    Description: Email address for the alert notification
    Type: String
  RecipientEmail:
    Description: Email address for the alert notification
    Type: String
  Prefix:
    Description: Addition of prefix to all Resources
    Type: String


Resources:
  DASSNSAlertTopic:
    Properties:
      DisplayName: !Sub '${Prefix}-DASAlertNotification'
      Subscription:
        - Endpoint: !Ref RecipientEmail
          Protocol: email
      TopicName: DASSNSAlertTopic
    Type: 'AWS::SNS::Topic'
  DASAlertFunction:
    Properties:
      Code:
        S3Bucket: !Ref s3Bucket
        S3Key: !Ref s3Key
      FunctionName: !Sub '${Prefix}-DASAlertFunction'
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Environment:
        Variables:
          snstopic_arn: !Join
            - ':'
            - - 'arn:aws:sns'
              - !Ref 'AWS::Region'
              - !Ref 'AWS::AccountId'
              - !GetAtt
                - DASSNSAlertTopic
                - TopicName
      Role: !GetAtt
        - SendGrantNotificationRole
        - Arn
      Runtime: python3.7
      Timeout: '60'
    Type: 'AWS::Lambda::Function'
  SendGrantNotificationRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'sns:ListSubscriptionsByTopic'
                  - 'sns:Publish'
                  - 'sns:GetTopicAttributes'
                  - 'sns:ListTopics'
                  - 'sns:Unsubscribe'
                  - 'sns:Subscribe'
                  - 'sns:ListSubscriptions'
                  - 'sns:GetSubscriptionAttributes'
                Effect: Allow
                Resource: !Join
                  - ':'
                  - - 'arn:aws:sns'
                    - !Ref 'AWS::Region'
                    - !Ref 'AWS::AccountId'
                    - !GetAtt
                      - DASSNSAlertTopic
                      - TopicName 
                Sid: SNSGenericAccess
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
                Sid: SNSLogAccess
            Version: 2012-10-17
          PolicyName: !Sub '${Prefix}-SendDASAlertLambdaIAMPolicy'
      RoleName: !Sub '${Prefix}-SendDASAlertLambdaIAMRole'
    Type: 'AWS::IAM::Role'
